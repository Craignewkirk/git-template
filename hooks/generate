#!/usr/bin/env ruby

basedir = File.dirname(__FILE__)
argv    = ARGV.dup
type    = argv.first
hooks   = argv.drop(1)

template = <<-TPL
#!/usr/bin/env ruby

require_relative "hook"

# Call #run_hooks with the name of the scripts that will be
# executed when this hook is called. Add :& as the last argument
# to run the scripts in background. Each hook will run in order.
#
# All the scripts must be in the directory:
#
#     hooks/bin/
#
#
# Example:
#
#    # background scripts, they don't stop the execution
#    # of the git command
#    run_hooks "bundler", "ctags", :&
#    # you also can use the #detach_hooks method
#    detach_hooks "bundler", "ctags"
#
#    # normal hook
#    run_hook "no-commit"

run_hooks #{hooks.map { |h| %Q("#{h}") }.join(", ")}
TPL

def create_file(name, content)
  File.open(name, 'w') do |file|
    file.write content
    file.chmod(0755)
  end
end

if File.exist?(type)
  $stderr.puts "ERROR: The hook #{type} exists, aborting."
  exit 1
end

hook = "#{basedir}/#{type}"
$stdout.puts ">> git-hooks > creating hook > #{hook}"
create_file(hook, template)

dir = "#{basedir}/bin"
unless File.exist?(dir)
  Dir.mkdir(dir, 0755)
  $stdout.puts ">> git-hooks > creating hooks directory > #{dir}"
end

hooks.each do |h|
  hook_file = "#{dir}/#{h}"
  unless File.exist?(hook_file)
    $stdout.puts ">> git-hooks > creating hook > #{hook_file}"
    create_file(hook_file, '# TODO')
  end
end
