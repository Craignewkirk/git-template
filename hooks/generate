#!/usr/bin/env ruby

basedir = File.dirname(__FILE__)
argv    = ARGV.dup
type    = argv.first
hooks   = argv.drop(1).join(' ')

template = <<-TPL
#!/usr/bin/env ruby

require_relative "hook"

# Put here the name of the scripts that will be executed
# when this hook is called.
scripts = {
  # These scripts must be in the directory:
  #     hooks/#{type}.d/
  "#{type}" => %w[#{hooks}],

  # You can execute other scripts in other directories,
  # like `shared` or `utils`:
  #     hooks/shared.d/
  # "shared" => %w[noop ctags],
  # To execute a script in background pass the `:bg` along
  # with the name of the script, as an array.
  # Here we can execute the `ctags` script in background:
  # "shared" => ["noop", ["ctags", :bg]],
}

Hook.new(scripts).call
TPL

def create_file(name, content)
  File.open(name, 'w') do |file|
    file.write content
    file.chmod(0755)
  end
end

if File.exist?(type)
  $stderr.puts "ERROR: The hook #{type} exists, aborting."
  exit 1
end

hook = "#{basedir}/#{type}"
$stdout.puts ">> git-hooks > creating hook > #{hook}"
create_file(hook, template)

dir = "#{basedir}/#{type}.d"
unless File.exist?(dir)
  Dir.mkdir(dir, 0755)
  $stdout.puts ">> git-hooks > creating hooks directory > #{dir}"
end

hooks.split(' ').each do |hook|
  hook_file = "#{dir}/#{hook}"
  unless File.exist?(hook_file)
    $stdout.puts ">> git-hooks > creating hook > #{hook_file}"
    create_file(hook_file, '# TODO')
  end
end
